buildscript {
	ext {
		springBootVersion = '2.1.3.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
  id "org.springframework.boot" version "2.1.0.RELEASE"
}

wrapper {
    gradleVersion = '3.0'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'


jar {
	enabled=true
	baseName = project.app
	version = project.version
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

springBoot  { 
	buildInfo() 
    mainClassName = "com.vuclip.content.VideoServiceApplication"  
}

configurations.all {
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    exclude group: 'org.springframework.boot', module: 'logback-classic'
}


dependencies {
	
	compile group: 'org.springframework.boot', name:'spring-boot-starter'
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-log4j2'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.1.3.RELEASE'
     compile group: 'org.springframework.boot', name: 'spring-boot-starter-security'
    
	compile group: 'com.graphql-java', name: 'graphql-java', version: '7.0'
    compile group: 'com.graphql-java', name: 'graphql-java-tools', version: '4.3.0'
    compile group: 'com.graphql-java', name: 'graphql-spring-boot-starter', version: '4.3.0'
    compile group: 'com.graphql-java', name: 'graphql-java-servlet', version: '4.7.0'
    compile group: 'com.graphql-java', name: 'graphiql-spring-boot-starter', version: '4.3.0'
    
    
    
//	compile fileTree(dir: 'libs', include: ['*.jar'])
	runtime group: 'mysql', name: 'mysql-connector-java', version :'5.1.6'
	testCompile group: 'org.springframework.boot', name:'spring-boot-starter-test'	
//	runtime files('config')
}



bootRun() 
{
		println 'USAGE : bootRun -Pprofile=<local/qa2/prod/automation> -PdebugPort=<port>'
		def propsDirPath = project.defaultPropsDir;			    	    
		def profile = project.hasProperty("profile") ? profile : project.defaultProfile
	    def propertiesPath = propsDirPath + "/video-service/" + profile + ".properties"
	
		if (project.hasProperty("debugPort")){
			jvmArgs = ['-Xdebug', '-Xrunjdwp:server=y,transport=dt_socket,suspend=n,address=' + debugPort]
		}
	
	systemProperty "spring.profiles.active", profile
   	systemProperty "spring.config.location", propertiesPath
   	    	
}